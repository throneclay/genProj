#include "ctemplate.h"
#include <string>

using namespace std;

void cTemplate::genMakefile(string &fmakefile, const string projname) {
    string comment = "# This file is generated by genProj program.\n# ";
    comment += timeInfo;
    comment += "\n";
    string content = R"(
cc=gcc
cflags=
objs=$(patsubst %.c,%.o,$(wildcard *.c))
incs=-I.
lib_path=-L.
libs=
exe = )";
    content += projname;
    content += R"(

all: bin
bin: $(exe)

.c.o: 
	$(cc) $(cflags) -c $< -o $@ $(incs)

$(exe): $(objs)
	$(cc) $(cflags) -o $@ $(objs) $(lib_path) $(libs)

run: $(exe)
	./$(exe)

clean:
	rm -f *.o $(exe)
)";

    fmakefile = comment + content;
}

void cTemplate::genHeader(string &fheader) {
    string comment = "// This file is generated by genProj program.\n// ";
    comment += timeInfo;
    comment += "\n";
    string include = R"(
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
)";
    fheader = comment + include;
}

void cTemplate::genFunction(string &ffunc, const string funcname) {
    ffunc = R"(
void genRandomf(float* r, int length, float min, float max)
{
    srand(time(NULL));
    for(int i = 0; i < length; i++)
    {
        r[i] = rand()/RAND_MAX*(max-min)+min;
    }
}

void genRandomi(int* r, int length, int min, int max)
{
    srand(time(NULL));
    for(int i = 0; i < length; i++)
    {
        r[i] = (float)rand()/RAND_MAX*(max-min)+min;
    }
}

double second()
{
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return (double)tv.tv_sec + (double)tv.tv_usec / 1000000.0;
}

)";

    string ret = "void ";
    string para = "(void)\n";
    string body = "{\n    printf(\"hello, world!\\n\");\n}\n\n";
    ffunc += ret + funcname + para + body;
}

void cTemplate::genMain(string &fmain, const string callfunc) {
    fmain = "int main(int argc, char* argv[])\n{\n    ";
    fmain += callfunc;
    fmain += "();\n";
    fmain += "    return 0;\n}";
}

void cTemplate::Process() {
    string fmakefile;
    genMakefile(fmakefile, dirname);

    string fheader, ffunc, fmain, ffile;
    genHeader(fheader);
    genFunction(ffunc, dirname);
    genMain(fmain, dirname);
    ffile = fheader + ffunc + fmain;

    append("Makefile", fmakefile);
    append("main.c", ffile);
    createDir();
    flush();
}

void cppTemplate::genMakefile(string &fmakefile, const string projname) {
    string comment = "# This file is generated by genProj program.\n# ";
    comment += timeInfo;
    comment += "\n";
    string cc = "cc=g++\n";
    string cflags = "cflags=\nincs=-I.\nlib_path=-L.\nlibs=\n";
    string obj = "objs=$(patsubst %.cc,%.o,$(wildcard *.cc))\n";
    string exe = "exe=";
    exe += projname;
    exe += "\n\n";

    string bin = "all: bin\nbin: $(exe)\n\n";
    string compile = ".cc.o:\n\t$(cc) $(cflags) -c $< -o $@ $(incs)\n\n";
    string link = "$(exe):$(objs)\n\t$(cc) $(cflags) -o $@ $(objs) $(lib_path) $(libs)\n\nrun: $(exe)\n\t./$(exe)\n\n";
    string clean = "clean:\n\trm -f *.o $(exe)\n";

    fmakefile = comment + cc + cflags + \
            obj + exe + bin + compile + link + clean;
}

void cppTemplate::genHeader(string &fheader) {
    string comment = "// This file is generated by genProj program.\n// ";
    comment += timeInfo;
    comment += "\n";

    string include = "#include <iostream>\nusing namespace std;\n\n";
    fheader = comment + include;
}

void cppTemplate::genFunction(string &ffunc, const string funcname) {
    string ret = "void ";
    string para = "(void)\n";
    string body = "{\n    cout<<\"hello, world!\"<<endl;\n}\n\n";
    ffunc = ret + funcname + para + body;
}

void cppTemplate::genClass(std::string &fclass, const std::string classname) {
    string head = "class " + classname + "{\npublic:\n";
    string constructorfunc = "    " + classname + "()\n    {}\n\n";
    string destructorfunc = "    ~" + classname + "()\n    {}\n\n";
    string ffunc;
    genFunction(ffunc, classname + "func");
    string end = "private:\n\n};\n";
    fclass = head + constructorfunc + destructorfunc + ffunc + end;
}

void cppTemplate::genMain(string &fmain, const string callclass) {
    fmain = "int main(int argc, char* argv[])\n{\n    ";
    fmain += callclass;
    fmain += " t;\n    t.";
    fmain += callclass + "func();\n";
    fmain += "    return 0;\n}";
}

void cppTemplate::Process() {
    string fmakefile;
    genMakefile(fmakefile, dirname);

    string fheader, fclass, fmain, ffile;

    genHeader(fheader);
    genClass(fclass, dirname);
    genMain(fmain, dirname);
    ffile = fheader + fclass + fmain;

    append("Makefile", fmakefile);
    append("main.cc", ffile);
    createDir();
    flush();
}
